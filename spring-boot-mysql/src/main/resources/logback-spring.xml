<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <!-- 应用名-->
    <springProperty scope="context" name="SERVER_NAME" source="spring.application.name"/>
    <!--日志路径-->
    <springProperty scope="context" name="FILE_PATH" source="logging.home"/>
    <!--日志格式-->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} --- [%15.15t] %-40.40logger{39}%5L: %m%n"/>
    <!-- 保留30天的日志 -->
    <property name="MAX_HISTORY" value="30"/>
    <!-- 日志单文件大小限制-->
    <property name="MAX_FILE_SIZE" value="200MB"/>
    <!-- 日志文件总大小，超过该大小，旧得即将删除-->
    <property name="TOTAL_SIZE_CAP" value="100GB"/>

    <!--输出到控制台-->
    <!--<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            &lt;!&ndash; 日志格式 &ndash;&gt;
            <pattern>${LOG_PATTERN}</pattern>
            &lt;!&ndash; 编码 &ndash;&gt;
            <charset>UTF-8</charset>
        </encoder>
    </appender>-->

    <appender name="sysDailyRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前最新日志文件名 -->
        <file>${FILE_PATH}/sys.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天日志文件名 -->
            <fileNamePattern>${FILE_PATH}/sys-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保留30天的日志 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志文件总大小，超过该大小，旧得即将删除-->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 如果设置为 true ，当appender启动时，会删除所有归档旧文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 日志单文件大小限制-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <!-- 日志格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 编码 -->
            <charset>UTF-8</charset>
        </encoder>
        <!-- ThresholdFilter 临界值过滤器，过滤掉低于指定临界值的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <appender name="infoDailyRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前最新日志文件名 -->
        <file>${FILE_PATH}/logback-info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天日志文件名 -->
            <fileNamePattern>${FILE_PATH}/logback-info-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保留30天的日志 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志文件总大小，超过该大小，旧得即将删除-->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 如果设置为 true ，当appender启动时，会删除所有归档旧文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 日志单文件大小限制-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <!-- 日志格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 编码 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--匹配 info 级别的日志-->
            <level>INFO</level>
        </filter>
    </appender>

    <appender name="errorDailyRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前最新日志文件名 -->
        <file>${FILE_PATH}/logback-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天日志文件名 -->
            <fileNamePattern>${FILE_PATH}/logback-error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保留30天的日志 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志文件总大小，超过该大小，旧得即将删除-->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 如果设置为 true ，当appender启动时，会删除所有归档旧文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 日志单文件大小限制-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <!-- 日志格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 编码 -->
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- ThresholdFilter 临界值过滤器，过滤掉低于指定临界值的日志 -->
            <level>WARN</level>
        </filter>
    </appender>

    <appender name="sqlLogRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/sql-log.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${FILE_PATH}/sql-log-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 按天日志文件名 -->
            <fileNamePattern>${FILE_PATH}/logback-error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保留30天的日志 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志文件总大小，超过该大小，旧得即将删除-->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 如果设置为 true ，当appender启动时，会删除所有归档旧文件-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 日志单文件大小限制-->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <logger name="com.aking" level="INFO">
        <appender-ref ref="infoDailyRollingFile"/>
        <appender-ref ref="errorDailyRollingFile"/>
<!--        <appender-ref ref="console"/>-->
    </logger>

    <!-- sql日志-->
    <logger name="com.alibaba.druid.filter.stat.StatFilter" level="INFO">
        <appender-ref ref="sqlLogRollingFile"/>
    </logger>

    <!-- the root level of logging -->
    <root level="INFO">
        <appender-ref ref="sysDailyRollingFile"/>
    </root>
</configuration>